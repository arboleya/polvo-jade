// Generated by CoffeeScript 1.6.3
var Index, fs, jade, path;

(require('source-map-support')).install({
  handleUncaughtExceptions: false
});

fs = require('fs');

path = require('path');

jade = require('jade');

module.exports = new (Index = (function() {
  function Index() {}

  Index.prototype.polvo = true;

  Index.prototype.type = 'template';

  Index.prototype.name = 'jade';

  Index.prototype.output = 'js';

  Index.prototype.ext = /\.jade$/m;

  Index.prototype.exts = ['.jade'];

  Index.prototype.partials = true;

  Index.prototype.is_partial = function(filepath) {
    return /^_/m.test(path.basename(filepath));
  };

  Index.prototype.compile = function(filepath, source, debug, error, done) {
    var compiled, err;
    try {
      compiled = jade.compile(source, {
        filename: filepath,
        client: true,
        compileDebug: debug
      });
    } catch (_error) {
      err = _error;
      return error(err);
    }
    return done('module.exports = ' + compiled, null);
  };

  Index.prototype.resolve_dependents = function(file, files) {
    var dependents, dirpath, each, full_id, has_include_calls, match, match_all, name, short_id, _i, _len;
    dependents = [];
    has_include_calls = /^\s*(?!\/\/)include\s/m;
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      each = files[_i];
      if (!has_include_calls.test(each.raw)) {
        continue;
      }
      dirpath = path.dirname(each.filepath);
      name = path.basename(each.filepath);
      match_all = /^\s*(?!\/\/)include\s+(\S+)/mg;
      while ((match = match_all.exec(each.raw)) != null) {
        short_id = match[1];
        if ('' === path.extname(short_id)) {
          short_id += '.jade';
        }
        full_id = path.join(dirpath, short_id);
        if (full_id === file.filepath) {
          if (!this.is_partial(name)) {
            dependents.push(each);
          } else {
            dependents = dependents.concat(this.resolve_dependents(each, files));
          }
        }
      }
    }
    return dependents;
  };

  return Index;

})());
